<?php

/**
 * @file
 * We will add the ability to request a node focused on a specific 
 * keyword or keyphrase. The node will have to be ready photo ready, content ready 
 * and editor ready before it can be published.
 *
 * We will add the ability for each node to have a "rating," which will be a
 * number from one to five.
 */

 /*
  * Admin and Block Files.
  */
 
 require_once 'prodqueue.admin.inc';
 require_once 'prodqueue.block.inc';

/*
 * hook_menu()
 * 
 */
 
function prodqueue_menu() {
	$items['admin/settings/prodqueue'] = array(
		'title' => 'Production Queue Settings',
		'description' => 'Enable or disable production queue for content types.',
		'page callback' => 'prodqueue_settings',
		//'callback arguments' => array('prodqueue_admin_settings'),
		'access callback' => TRUE,
		'expanded' => TRUE,
	);
	$items['prodqueue/callbacks/generate_pages'] = array(
		'type' => MENU_CALLBACK,
		'title' => 'Generate Page Requests',

		'page callback' => 'prodqueue_request_pages',
		'page arguments' => array(t('The menu entry for this page is of type MENU_CALLBACK, so it provides only a path but not a link in the menu links, but it is the same in every other way to the simplest example.')),
		'access callback' => TRUE,
	);
  
	$items['prodqueue/manage/content-checkout_list'] = array(
		//'type' => MENU_CALLBACK,
		'description' => t('List all content thay may be checked out'),
		'title' => 'Check Out Content',
		'page callback' => 'prodqueue_content_checkout_list',
		'access callback' => TRUE,
	);
  	
	return $items;
}

/*
 * hook_theme()
 * 
 */

function prodqueue_theme() {
    return array(
        'prodqueue_admin_form' => array(
            'arguments' => array('form' => NULL),
        ),
    );
}



function prodqueue_content_checkout_list(){
	$list = '<table>';
	$result = db_query("SELECT node.nid AS nid,
   node.title AS node_title,
   node.type AS type,
   node.changed AS node_changed
 FROM {node} node 
 INNER JOIN {prodqueue} pq ON node.nid = pq.nid
 ORDER BY node_title ASC");
	while ($row = db_fetch_object($result)) {
		//$node = node_load($row->nid);
		$title = $row->node_title;
		$type = $row->type;
		$list .= '<tr><td>'.$title.'</td><td>'.$type.'</td></tr>'."\n";
  
		//drupal_set_message($update);
	}
	$list .= '</table>';
	
	return $list;
   
}



function prodqueue_request_pages() {
  return drupal_get_form('prodqueue_request_pages_form');
}

/*
 *
 */
 function prodqueue_request_pages_form($form_state){
 
	$form['requested_title'] = array (
		'#type' => 'textfield',
		'#title' => t('Title of Content You Want to Generate'),
		'#required' => TRUE,
	);
	$form['requested_nodetype'] = array(
		'#type' => 'select',
		'#title' => t('Node type of requested content'),
		//'#options' => node_get_types('names'),
		//'#options' => variable_get('prodqueue_nodetypes', array('story')),
		'#options' => get_prodqueue_nodes_array(),
		'#default_value' => variable_get('prodqueue_nodetypes', array('story')),
		//'#description' => t('Only listing node types that are managed by production queue.'),
		'#required' => TRUE,
	);
	$form['keyword1'] = array (
		'#type' => 'textfield',
		'#title' => t('Focus Keyword or Phrase 1'),
		'#required' => TRUE,
	);
	$form['keyword2'] = array (
		'#type' => 'textfield',
		'#title' => t('Focus Keyword or Phrase 2'),
		'#required' => TRUE,
	);
	$form['keyword3'] = array (
		'#type' => 'textfield',
		'#title' => t('Focus Keyword or Phrase 3'),
		'#required' => FALSE,
	);
	$form['keyword4'] = array (
		'#type' => 'textfield',
		'#title' => t('Focus Keyword or Phrase 4'),
		'#required' => FALSE,
	);
	 
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => t('Request it'),  
	);
	return $form;
 }
 
 /*
  * put the value (node type name) of the array in the key
  */
 function get_prodqueue_nodes_array(){
	$parray = variable_get('prodqueue_nodetypes', array('story'));
	foreach ($parray as $key => $value){
		$narray[$value] = $value;
	}
	return $narray;
 }

 function prodqueue_request_pages_form_validate ($form_id, &$form_state) {
	$req_node_type = $form_state['values']['requested_nodetype']; 
	$req_title = $form_state['values']['requested_title'];
	$keyword1 = $form_state['values']['keyword1'];
	$keyword2 = $form_state['values']['keyword2'];
	// check for duplicate titles in the nodes
	$existing_title = db_fetch_object(db_query("SELECT title FROM {node} where title = '%s'",$req_title));
	if(strtolower($existing_title->title) == strtolower($req_title)){
		form_set_error('requested_title',t('requested title exists'));
	}
	if (!$req_node_type != '') {
		form_set_error('requested_nodetype', t('Please select the node type that you would like to request'));
	}	
	if (!$req_title) {
		form_set_error('requested_title', t('Ooops! Please fill in the title for the requested content?'));
	}
	if (!$keyword1) {
		form_set_error('keyword1', t('Please fill in the keyword 1'));
	}
	if (!$keyword2) {
		form_set_error('keyword2', t('Please fill in the keyword 2'));
	}
}
 
/**
 * Once the form passes the validation (above) this runs
 * 
 * Docs @
 * http://api.drupal.org/api/file/developer/topics/forms_api.html/6
 * (under Submitting Forms)
 * 
 *
 */
function prodqueue_request_pages_form_submit ($form_id, &$form_state) {
	global $user;
	$req_node_type = $form_state['values']['requested_nodetype']; 
	$req_title = $form_state['values']['requested_title'];
	$keyword1 = $form_state['values']['keyword1'];
	$keyword2 = $form_state['values']['keyword2'];
	$keyword3 = $form_state['values']['keyword3'];
	$keyword4 = $form_state['values']['keyword4'];
  
  // Node ID must be a number that is not in the database.
  $max_nid_ob = db_fetch_object(db_query('SELECT MAX(nid) as max_nid FROM {node}'));
  //new_nid = $max_nid + mt_rand(1000, 1000000);
  $new_nid = $max_nid_ob->max_nid + 1;
  $title = $req_title;
/* 
 $node = array(
    'title' => $title, 
    //'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomName(32)))), 
    'uid' => $user->uid, 
    'type' => $req_node_type, 
    'nid' => $new_nid, 
    'is_new' => TRUE,
	'is_request' => TRUE, //set so we can bypass the seo_keywords check at update
  );
  */

  $node = new stdClass();
 
//Main Node Fields
$node->name = $title;
$node->title = $title;
$node->body = "";
$node->type = $req_node_type;
$node->created = time();
$node->changed = $node->created;
$node->promote = 0; // Display on front page ? 1 : 0
$node->sticky = 0;  // Display top of page ? 1 : 0
$node->format = 2;  // 1:Filtered HTML, 2: Full HTML
$node->status = 0;   // Published ? 1 : 0
$node->language = 'en';
  
if ($node = node_submit($node)) {
	$node->is_request = TRUE;
    node_save($node);
    
	if(module_exists('seo_keywords')){
		db_query("INSERT INTO {seo_keywords} (nid, vid, timestamp, keyword1, keyword2, keyword3, keyword4) 
						VALUES (%d, %d, %d, '%s', '%s', '%s', '%s')", $node->nid, $node->vid, time(), $keyword1, $keyword2, $keyword3, $keyword4);
	}
	db_query("INSERT INTO {prodqueue} (nid, request_time) values(%d,%d)",$node->nid,time());
	
    //Enter Nodewords  
    //This is not required, but once you save the node, you can add meta tags via
    //the nodewords module
    
	//$nodewords['keywords']['value'] = $keywords;
    //$nodewords['description']['value'] = $description;
    //nodewords_save_tags(NODEWORDS_TYPE_NODE, $node->nid, $nodewords, TRUE);
 
    drupal_set_message(t("Node ".$node->title." added correctly"));
} else {
    drupal_set_message(t("Node ".$node->title." added incorrectly"), "error");
}
  
  // check_plain() makes sure there's nothing nasty going on in the text written by the user.
  $output .= check_plain($req_title);
  $output .= t(' the content <i>@title</i> was requested successfully', array('@title' => $title));

  
  drupal_set_message($output);
}
 

/**
* Implementation of hook_nodeapi().
*/
function prodqueue_nodeapi(&$node, $op, $teaser, $page) {
    switch ($op) {
		// Delete is called when the node is being deleted, it gives us a chance
		// to delete the seo keywords and all revisions as well.
		case 'delete':
			db_query('DELETE FROM {prodqueue} WHERE nid = %d', $node->nid);
			break;
	}
}