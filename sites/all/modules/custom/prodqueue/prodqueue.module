<?php

/**
 * @file
 * We will add the ability to request a node focused on a specific 
 * keyword or keyphrase. The node will have to be ready photo ready, content ready 
 * and editor ready before it can be published.
 *
 * We will add the ability for each node to have a "rating," which will be a
 * number from one to five.
 */

 /*
  * Admin and Block Files.
  */
 
 require_once 'prodqueue.admin.inc';
 require_once 'prodqueue.block.inc';
 require_once 'prodqueue.node.inc';

/*
 * hook_menu()
 * 
 */
 
function prodqueue_menu() {
	$items['admin/settings/prodqueue'] = array(
		'title' => 'Production Queue Settings',
		'description' => 'Enable or disable production queue for content types.',
		'page callback' => 'prodqueue_settings',
		//'callback arguments' => array('prodqueue_admin_settings'),
		'access callback' => TRUE,
		'expanded' => TRUE,
	);
    
    $items['queue/%'] = array(
        'page callback' => 'prodqueue_queue_page',
        'page arguments' => array(1),
        'access callback' => 'prodqueue_queue_page_access',
        'access arguments' => array(1)
    );
    
	$items['prodqueue/generate'] = array(
		'type' => MENU_CALLBACK,
		'title' => 'Generate Page Requests',
		'page callback' => 'prodqueue_request_pages',
		'access callback' => TRUE,
	);
    
    $items['prodqueue/action/%'] = array(
        'page callback' => 'prodqueue_action_page',
        'page arguments' => array(2),
        'access callback' => 'prodqueue_action_page_access',
        'access arguments' => array(2)
    
    );
  	
	return $items;
}

/*
 * hook_theme()
 * 
 */

function prodqueue_theme() {
    return array(
        'prodqueue_admin_form' => array(
            'arguments' => array('form' => NULL),
        ),
        'prodqueue_node_progress' => array(
			'arguments' => array('node' => NULL),
		),
    );
}


function prodqueue_request_pages() {
  return drupal_get_form('prodqueue_request_pages_form');
}

/*
 *
 */
 function prodqueue_request_pages_form($form_state){
 
	$form['requested_title'] = array (
		'#type' => 'textfield',
		'#title' => t('Title of Content You Want to Generate'),
		'#required' => TRUE,
	);
	$form['requested_nodetype'] = array(
		'#type' => 'select',
		'#title' => t('Node type of requested content'),
		//'#options' => node_get_types('names'),
		//'#options' => variable_get('prodqueue_nodetypes', array('story')),
		'#options' => get_prodqueue_nodes_array(),
		'#default_value' => variable_get('prodqueue_nodetypes', array('story')),
		//'#description' => t('Only listing node types that are managed by production queue.'),
		'#required' => TRUE,
	);
	$form['keyword1'] = array (
		'#type' => 'textfield',
		'#title' => t('Focus Keyword or Phrase 1'),
		'#required' => TRUE,
	);
	$form['keyword2'] = array (
		'#type' => 'textfield',
		'#title' => t('Focus Keyword or Phrase 2'),
		'#required' => TRUE,
	);
	$form['keyword3'] = array (
		'#type' => 'textfield',
		'#title' => t('Focus Keyword or Phrase 3'),
		'#required' => FALSE,
	);
	$form['keyword4'] = array (
		'#type' => 'textfield',
		'#title' => t('Focus Keyword or Phrase 4'),
		'#required' => FALSE,
	);
	 
	$form['submit'] = array (
		'#type' => 'submit',
		'#value' => t('Request it'),  
	);
	return $form;
 }
 
 /*
  * put the value (node type name) of the array in the key
  */
 function get_prodqueue_nodes_array(){
	$parray = variable_get('prodqueue_nodetypes', array('story'));
	foreach ($parray as $key => $value){
		$narray[$value] = $value;
	}
	return $narray;
 }

 function prodqueue_request_pages_form_validate ($form_id, &$form_state) {
	$req_node_type = $form_state['values']['requested_nodetype']; 
	$req_title = $form_state['values']['requested_title'];
	$keyword1 = $form_state['values']['keyword1'];
	$keyword2 = $form_state['values']['keyword2'];
	// check for duplicate titles in the nodes
	$existing_title = db_fetch_object(db_query("SELECT title FROM {node} where title = '%s'",$req_title));
	if(strtolower($existing_title->title) == strtolower($req_title)){
		form_set_error('requested_title',t('requested title exists'));
	}
	if (!$req_node_type != '') {
		form_set_error('requested_nodetype', t('Please select the node type that you would like to request'));
	}	
	if (!$req_title) {
		form_set_error('requested_title', t('Ooops! Please fill in the title for the requested content?'));
	}
	if (!$keyword1) {
		form_set_error('keyword1', t('Please fill in the keyword 1'));
	}
	if (!$keyword2) {
		form_set_error('keyword2', t('Please fill in the keyword 2'));
	}
}
 
/**
 * Once the form passes the validation (above) this runs
 * 
 * Docs @
 * http://api.drupal.org/api/file/developer/topics/forms_api.html/6
 * (under Submitting Forms)
 * 
 *
 */
function prodqueue_request_pages_form_submit ($form_id, &$form_state) {
	global $user;
	$req_node_type = $form_state['values']['requested_nodetype']; 
	$req_title = $form_state['values']['requested_title'];
	$keyword1 = $form_state['values']['keyword1'];
	$keyword2 = $form_state['values']['keyword2'];
	$keyword3 = $form_state['values']['keyword3'];
	$keyword4 = $form_state['values']['keyword4'];
  
  // Node ID must be a number that is not in the database.
  $max_nid_ob = db_fetch_object(db_query('SELECT MAX(nid) as max_nid FROM {node}'));
  //new_nid = $max_nid + mt_rand(1000, 1000000);
  $new_nid = $max_nid_ob->max_nid + 1;
  $title = $req_title;
/* 
 $node = array(
    'title' => $title, 
    //'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomName(32)))), 
    'uid' => $user->uid, 
    'type' => $req_node_type, 
    'nid' => $new_nid, 
    'is_new' => TRUE,
	'is_request' => TRUE, //set so we can bypass the seo_keywords check at update
  );
  */

  $node = new stdClass();
 
//Main Node Fields
$node->name = $title;
$node->title = $title;
$node->body = "";
$node->type = $req_node_type;
$node->created = time();
$node->changed = $node->created;
$node->promote = 0; // Display on front page ? 1 : 0
$node->sticky = 0;  // Display top of page ? 1 : 0
$node->format = 2;  // 1:Filtered HTML, 2: Full HTML
$node->status = 0;   // Published ? 1 : 0
$node->language = 'en';
  
if ($node = node_submit($node)) {
	$node->is_request = TRUE;
    node_save($node);
    
	if(module_exists('seo_keywords')){
		db_query("INSERT INTO {seo_keywords} (nid, vid, timestamp, keyword1, keyword2, keyword3, keyword4) 
						VALUES (%d, %d, %d, '%s', '%s', '%s', '%s')", $node->nid, $node->vid, time(), $keyword1, $keyword2, $keyword3, $keyword4);
	}
	db_query("INSERT INTO {prodqueue} (nid, request_time) values(%d,%d)",$node->nid,time());
	
    //Enter Nodewords  
    //This is not required, but once you save the node, you can add meta tags via
    //the nodewords module
    
	//$nodewords['keywords']['value'] = $keywords;
    //$nodewords['description']['value'] = $description;
    //nodewords_save_tags(NODEWORDS_TYPE_NODE, $node->nid, $nodewords, TRUE);
 
    drupal_set_message(t("Node ".$node->title." added correctly"));
} else {
    drupal_set_message(t("Node ".$node->title." added incorrectly"), "error");
}
  
  // check_plain() makes sure there's nothing nasty going on in the text written by the user.
  $output .= check_plain($req_title);
  $output .= t(' the content <i>@title</i> was requested successfully', array('@title' => $title));

  
  drupal_set_message($output);
}
 

/**
* Implementation of hook_nodeapi().
*/
function prodqueue_nodeapi(&$node, $op, $teaser, $page) {
    switch ($op) {
		// Delete is called when the node is being deleted, it gives us a chance
		// to delete the seo keywords and all revisions as well.
        case 'insert':
            // We create a prodqueue entry for the node.
            $watched_types = prodqueue_get_types();
            
            if(in_array($node->type, $watched_types)) {
                db_query('INSERT INTO {prodqueue} (nid, uid) VALUES(%d, %d)', $node->nid, $node->uid);
            }
        case 'load':
            // Make sure we have prodqueue in the $node object when we do a node_load().
            $prodqueue = db_fetch_array(db_query('SELECT * FROM {prodqueue} WHERE nid = %d', $node->nid));
            return array('prodqueue' => $prodqueue);
            break;
		case 'delete':
			db_query('DELETE FROM {prodqueue} WHERE nid = %d', $node->nid);
			break;
	}
}

/**
 * Implementation of hook_form_alter() to modify node edit screens.
 */
function prodqueue_form_alter(&$form, $form_state, $form_id) {
     if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
         // Are we watching this node in prodqueue?
         if(is_array($form['#node']->prodqueue)) {			
             $form['prodqueue'] = array(
                  '#type' => 'fieldset', 
                  '#title' => t('Production Queue'), 
                  '#weight' => -100,
                );
				
			$form['prodqueue_info'] = array(
				'#value' => theme('prodqueue_node_progress', $form['#node']),
				'#weight' => -100,
			);
            
            $form['prodqueue']['content_submit'] = array(
                '#type' => 'submit',
                '#value' => t('Save and Check-In')
            );
            
            $form['prodqueue']['photo_submit'] = array(
                '#type' => 'submit',
                '#value' => t('Save and Check-In')
            );
            
            $form['prodqueue']['edit_submit'] = array(
                '#type' => 'submit',
                '#value' => t('Request Edit to Page')
            );
            
            $form['prodqueue']['content_reject'] = array(
                '#type' => 'submit',
                '#value' => t('Reject Content')
            );
            
            $form['prodqueue']['photo_reject'] = array(
                '#type' => 'submit',
                '#value' => t('Reject Photo')
            );
			
			// Add actions to bottom of node.
			$form['buttons']['checkin'] = array(
				'#type' => 'submit',
				'#value' => t('Save and Check-In'),
				'#prodqueue_action' => 'checkin',
				'#prodqueue_context' => 'content',
			);
            
            $form['#submit'][] = 'prodqueue_node_submit';
         }
     }
}

function prodqueue_node_submit($form_id, &$form_state) {
    // We look in $form_state['clicked_button']['#prodqueue_action'] for the proper action to take.
    // Also look in #prodqueue_context for either 'content' or 'photo'.
	
	print '<pre>';
	print_r($form_state);
	print '</pre>';
	
	die();
	
    if(!form_get_errors()) {
		if($form_state['clicked_button']['#prodqueue_action'] == 'checkin') {
			if($form_state['clicked_button']['#prodqueue_context'] == 'content') {
				db_query('UPDATE {prodqueue} SET checked_out_uid = 0, checked_out = 0, checked_out_time = null, content_ready = 1, content_ready_time = UNIX_TIMESTAMP(), photo_ready = 0 WHERE nid = %d', $form_state['values']['nid']);
			}
		}
	} else {
		drupal_set_message('Content cannot be checked back into the Queue until all errors are resolved.');
	}
}


function prodqueue_queue_page($queue) {
    switch($queue) {
        case 'new':
            return prodqueue_queue_new();
            break;
        case 'user':
            return prodqueue_queue_user();
            break;
        case 'type':
            return prodqueue_queue_type();
            break;
        case 'photo':
            return prodqueue_queue_photo();
            break;
        case 'editor':
            return prodqueue_queue_editor();
            break;
        case 'publish':
            return prodqueue_queue_publish();
            break;
        case 'revisit':
            return prodqueue_queue_revisit();
            break;
        case 'edits':
            return prodqueue_queue_edits();
            break;
        case 'rejected':
            return prodqueue_queue_rejected();
            break;
    }
}

function prodqueue_queue_page_access($queue) {
    // TODO: Needs logic to determine if the user can access the particular queue screen.   
    return TRUE;
}

/*
 * New Content Queue
 */

function prodqueue_queue_new_data() {
    $result = db_query('SELECT DISTINCT n.nid, nt.type, n.title, n.created FROM {prodqueue} p, {node} n, {node_type} nt WHERE n.nid = p.nid AND n.type = nt.type AND p.content_ready = -1 AND p.checked_out = 0 AND n.status = 0');
    
    while($row = db_fetch_array($result)) {
        $data[$row['nid']] = array(
            'nid' => $row['nid'],
            'type' => $row['type'],
            'title' => $row['title'],
            'created' => $row['created'],
        );
    }
    
    return $data;
}

function prodqueue_queue_new_count() {
    $count = db_fetch_array(db_query('SELECT COUNT(n.nid) as count FROM {prodqueue} p, {node} n, {node_type} nt WHERE n.nid = p.nid AND n.type = nt.type AND p.content_ready = -1 AND p.checked_out = 0 AND n.status = 0'));
    return $count['count'];
}

function prodqueue_queue_new() {
    drupal_set_title('Production Queue: New Content');
    $data = prodqueue_queue_new_data();
    
    if(is_array($data)) {
        $rows = array();
        
        foreach($data as $nid => $item) {
            $rows[] = array(
                l($item['title'], 'node/' . $nid),
                $item['type'],
                $item['created'],
                l('Checkout', 'prodqueue/action/checkout/'. $nid),
            );
        }
    
        $header = array('Title', 'Type', 'Created', '');
        
        return theme('table', $header, $rows);
    }
    else {
        return t('<p>There is no new content to be edited at this time.</p>');
    }
}

/*
 * User Queue
 */

function prodqueue_queue_user_data() {
    global $user;
    $result = db_query('SELECT n.nid, nt.type, n.title, p.checked_out_time FROM {prodqueue} p, {node} n, {node_type} nt WHERE n.nid = p.nid AND nt.type = n.type AND p.checked_out_uid = %d AND p.checked_out = 1 AND n.status = 0', $user->uid);
    
    while($row = db_fetch_array($result)) {
        $data[$row['nid']] = array(
            'nid' => $row['nid'],
            'type' => $row['type'],
            'title' => $row['title'],
            'checked_out_time' => $row['checked_out_time'],
        );
    }
    
    return $data;
}

function prodqueue_queue_user_count() {
    global $user;
    $count = db_fetch_array(db_query('SELECT count(n.nid) as count FROM {prodqueue} p, {node} n, {node_type} nt WHERE n.nid = p.nid AND nt.type = n.type AND p.checked_out_uid = %d AND p.checked_out = 1 AND n.status = 0', $user->uid));
    return $count['count'];
}

function prodqueue_queue_user() {
    drupal_set_title('Production Queue: Your Pages');
    $data = prodqueue_queue_user_data();
    
    if(is_array($data)) {
        $rows = array();
        
        foreach($data as $nid => $item) {
            $rows[] = array(
                l($item['title'], 'node/' . $nid),
                $item['type'],
                $item['checked_out_time'],
                l('Edit', 'node/'. $nid . '/edit'),
            );
        }
    
        $header = array('Title', 'Type', 'Checked Out Time', '');
        
        return theme('table', $header, $rows);
    }
    else {
        return t('<p>You do not currently have any content checked out to yourself.</p>');
    }
}

/*
 * Content Type Queue
 */

function prodqueue_queue_type_data($type) {
    $result = db_query('SELECT n.nid, n.title FROM {node} n WHERE n.type = "%s" AND n.status = 1', $type);
    
    while($row = db_fetch_array($result)) {
        $data[$row['nid']] = array(
            'nid' => $row['nid'],
            'title' => $row['title'],
        );
    }
    
    return $data;
}

function prodqueue_queue_type() {
    $type_name = node_get_types('name', arg(2));
    drupal_set_title('Production Queue: Published ' . $type_name);
    return "type";
}

/*
 * Photo Queue
 */

function prodqueue_queue_photo_data() {
    
}

function prodqueue_queue_photo_count() {
    return 0;
}

function prodqueue_queue_photo() {
    drupal_set_title('Production Queue: Photo Queue');
    return "photo";
}

/*
 * Editorial Review Queue
 */

function prodqueue_queue_editor_data() {
    
}

function prodqueue_queue_editor_count() {
    return 0;
}

function prodqueue_queue_editor() {
    drupal_set_title('Production Queue: Editorial Review');
    return "editor";
}

/*
 * Publisher Review Queue
 */

function prodqueue_queue_publish_data() {
    
}

function prodqueue_queue_publish_count() {
    return 0;
}

function prodqueue_queue_publish() {
    drupal_set_title('Production Queue: Publisher Review');
    return "publish";
}

/*
 * Rejected Content Queue
 */

function prodqueue_queue_rejected_data() {
    
}

function prodqueue_queue_rejected_count() {
    return 0;
}

function prodqueue_queue_rejected() {
    drupal_set_title('Production Queue: Rejected Content');
    return "rejected";
}

/*
 * Revisit Content Queue
 */

function prodqueue_queue_revisit_data() {
    
}

function prodqueue_queue_revisit_count() {
    return 0;
}

function prodqueue_queue_revisit() {
    drupal_set_title('Production Queue: Content Revisit Queue');
    return "revisit";
}

/*
 * Requested Edit Queue
 */

function prodqueue_queue_edits_data() {
    
}

function prodqueue_queue_edits_count() {
    return 0;
}

function prodqueue_queue_edits() {
    drupal_set_title('Production Queue: Requested Content Edits');
    return "edits";
}

/*
 * Content Type Counts
 */

function prodqueue_published_count($type) {
    $count = db_fetch_array(db_query('SELECT COUNT(*) as count FROM {node} WHERE type = "%s" AND status = 1', $type));
    return $count['count'];
}



/*
 * Actions
 */

function prodqueue_action_page($action) {
    switch($action) {
        case 'checkout':
            return prodqueue_action_checkout();
            break;
        case 'checkin':
            return prodqueue_action_checkin();
            break;
    }
}

function prodqueue_action_page_access($action) {
    // TODO: Need to check if users have specific rights to do the action.
    return TRUE;
}


/*
 * Checkout content.
 */

function prodqueue_action_checkout() {
    global $user;
    $nid = arg(3);
    
    db_query('UPDATE {prodqueue} SET checked_out_uid = %d, checked_out = 1, checked_out_time = UNIX_TIMESTAMP() WHERE nid = %d', $user->uid, $nid);
    
    drupal_goto('node/' . $nid . '/edit');
}

function prodqueue_action_checkin() {
    
}
